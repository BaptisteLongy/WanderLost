@page "/"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient Http
@inject MerchantHubClient HubClient
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Merchants</PageTitle>

<h1>Wandering Merchants</h1>

<label for="severRegion">Server Region: </label>
<select id="severRegion" @bind="@ServerRegion">
    <option></option>
    @foreach(var datacenter in _serverRegions?.Values ?? Enumerable.Empty<ServerRegion>())
    {
        <option>@datacenter.Name</option>
    }
</select>
<label for="server">Server: </label>
<select id="sever" @bind="@Server">
    <option></option>
    @if (!string.IsNullOrWhiteSpace(ServerRegion))
    {
        @foreach (var datacenter in _serverRegions?[ServerRegion].Servers ?? Enumerable.Empty<string>())
        {
            <option>@datacenter</option>
        }
    }
</select>

<label for="showAll" >Show All Merchants</label>

@if(string.IsNullOrWhiteSpace(ServerRegion) || string.IsNullOrWhiteSpace(Server))
{
    <h4>Select a Server</h4>
}
else if(_activeMerchants is not null && _merchants is not null)
{
    @if(_activeMerchants.Any(m => m.IsActive))
    {
        <h3>Active Merchants</h3>
        <ActiveMerchantsGrid Server="@Server" Merchants="@_activeMerchants" MerchantData="@_merchants" ActiveOnly="true" />
    }
    <h3>Upcoming Merchants</h3>
    <ActiveMerchantsGrid Server="@Server" Merchants="@_activeMerchants" MerchantData="@_merchants" />
}

@code {
    private string? _serverRegion;
    private string? ServerRegion
    {
        get { return _serverRegion; }
        set
        {
            _serverRegion = value;
            Server = null;
            ServerRegionChanged();
        }
    }

    private string? _server;
    private string? Server
    {
        get { return _server; }
        set
        {
            var oldValue = _server;
            _server = value;
            Task.Run(SaveData);
            Task.Run(() => ServerChanged(oldValue));
        }
    }

    private List<ActiveMerchant>? _activeMerchants;
    private Dictionary<string, ServerRegion>? _serverRegions;
    private Dictionary<string, MerchantData>? _merchants;

    private Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        _serverRegions = await Http.GetFromJsonAsync<Dictionary<string, ServerRegion>>(NavigationManager.ToAbsoluteUri("/data/servers.json"), Utils.JsonOptions);

        _merchants = await Http.GetFromJsonAsync<Dictionary<string, MerchantData>>(NavigationManager.ToAbsoluteUri("/data/merchants.json"), Utils.JsonOptions);

        _activeMerchants = _merchants?.Values.Select(m => new ActiveMerchant() { Name = m.Name }).ToList();

        if (_serverRegions is not null &&
            _merchants is not null &&
            _activeMerchants is not null)
        {
            _timer = new Timer(TimerTick, null, 1, 1000);
        }

        var savedData = await LocalStorage.GetItemAsync<ClientData?>(nameof(ClientData));
        ServerRegion = savedData?.Region;
        Server = savedData?.Server;

        HubClient.OnUpdateMerchant((server, merchant) =>
        {
            if(Server != server) return;
            _activeMerchants?.FirstOrDefault(am => am.Name == merchant.Name)?.CopyInstance(merchant);
            InvokeAsync(StateHasChanged);
        });

        if (HubClient.HubConnection.State == Microsoft.AspNetCore.SignalR.Client.HubConnectionState.Disconnected)
        {
            await HubClient.HubConnection.StartAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_timer is not null)
        {
            await _timer.DisposeAsync();
        }
    }

    private async Task ServerChanged(string? oldServer)
    {
        if (!string.IsNullOrWhiteSpace(oldServer))
        {
            await HubClient.UnsubscribeFromServer(oldServer);
        }
        if (!string.IsNullOrWhiteSpace(Server))
        {
            await HubClient.SubscribeToServer(Server);

            //Sync with the server's current data
            _activeMerchants?.ForEach(m => m.ClearInstance());
            foreach(var serverMerchant in await HubClient.GetKnownActiveMerchants(Server))
            {
                _activeMerchants?.FirstOrDefault(m => m.Name == serverMerchant.Name)?.CopyInstance(serverMerchant);
            }
        }
    }

    private void ServerRegionChanged()
    {
        UpdateMerchants(true);
    }

    private async Task SaveData()
    {
        await LocalStorage.SetItemAsync(nameof(ClientData), new ClientData()
            {
                Region = ServerRegion ?? string.Empty,
                Server = Server ?? string.Empty,
            });
    }

    async void TimerTick(object? _)
    {
        UpdateMerchants();
        await InvokeAsync(StateHasChanged);
    }

    private void UpdateMerchants(bool force = false)
    {
        if (string.IsNullOrWhiteSpace(_serverRegion)) return;
        if (_merchants is null) return;
        if (_activeMerchants is null) return;
        if (_serverRegions is null) return;

        bool resort = false;

        foreach(var merchant in _activeMerchants)
        {
            if (force || merchant.AppearanceExpires < DateTimeOffset.UtcNow)
            {
                merchant.CalculateNextAppearance(_merchants, _serverRegions[_serverRegion].UtcOffset);
                merchant.ClearInstance();
                resort = true;
            }
        }

        if (resort)
        {
            _activeMerchants = _activeMerchants.OrderBy(m => m.NextAppearance).ThenBy(m => _merchants[m.Name].Region).ToList();
        }
    }
}
