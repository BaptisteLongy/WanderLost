<h3 class="future-merchants-grid__title mt-3">Upcoming Merchants</h3>
<div class="future-merchants-grid__title @ClassName">
    @foreach (var merchantSpawnGroup in ActiveData.MerchantGroups
                                            .GroupBy(m => m.IsActive ? m.FutureAppearance : m.NextAppearance)
                                            .OrderBy(g => g.Key))
    {

        <h5>Spawn in @((merchantSpawnGroup.Key - DateTimeOffset.UtcNow).ToString(@"hh\:mm\:ss"))</h5>
        <div class="mt-1">
            @foreach (var merchantGroup in merchantSpawnGroup)
            {
                <div class="border border-secondary rounded p-2 m-1 text-nowrap d-inline-block">
                    @if (IsMerchantNotified(merchantGroup))
                    {
                        <span class="oi oi-star favorite-badge" />
                    }
                    @merchantGroup.MerchantName (@merchantGroup.MerchantData.Region)
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public ActiveDataController ActiveData { get; set; } = default!;

    [Parameter]
    public string ClassName { get; init; } = string.Empty;

    [Inject]
    public ClientSettingsController ClientSettings { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await ClientSettings.Init();
    }

    private bool IsMerchantNotified(ActiveMerchantGroup group)
    {
        ClientSettings.Notifications.TryGetValue(group.MerchantName, out var notifySettings);
        return notifySettings?.NotifySpawn == true;
    }
}