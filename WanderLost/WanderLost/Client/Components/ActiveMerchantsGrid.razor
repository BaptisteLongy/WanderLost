@inject MerchantHubClient HubClient

@{
    bool anyMerchantActive = GetVisibleMerchantGroups().Any(mg => mg.IsActive);
}
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Region</th>

            @if (anyMerchantActive)
            {
                <td>Expires</td>
                <th>Zone</th>
                <th>Card</th>
                <th>Rapport</th>
                <th>Votes</th>
                <th></th>
            }
            else
            {
                <th>Next Appearance In</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var merchantGroup in GetVisibleMerchantGroups())
        {
            int rowSpan = merchantGroup.ActiveMerchants.Count > 0 ? merchantGroup.ActiveMerchants.Count : 1; 
            <tr>
                <td rowspan="@rowSpan">@merchantGroup.MerchantName</td>
                <td rowspan="@rowSpan">@merchantGroup.MerchantData.Region</td>
                @if (anyMerchantActive && merchantGroup.IsActive)
                {
                    <td rowspan="@rowSpan">@((merchantGroup.AppearanceExpires - DateTimeOffset.UtcNow).ToString(@"hh\:mm\:ss"))</td>
                }
                else if(!anyMerchantActive && merchantGroup.NextAppearance > DateTimeOffset.UtcNow)
                {
                    <td>@((merchantGroup.NextAppearance - DateTimeOffset.UtcNow).ToString(@"hh\:mm\:ss"))</td>
                }
                else
                {
                    <td>Active</td>
                }

                @if(anyMerchantActive && merchantGroup.ActiveMerchants.Count == 0)
                {
                    <td>?</td>
                    <td>?</td>
                    <td>?</td>
                    <td/>
                    <td><a href="/UpdateMerchant/@Server/@merchantGroup.MerchantName">Submit Location</a></td>
                }
                else if(anyMerchantActive)
                {
                    var merchant = merchantGroup.ActiveMerchants.First();
                    <td><ZoneDisplay ZoneName="@merchant.Zone" /></td>
                    <td><ItemDisplay Item="@merchant.Card" /></td>
                    <td><ItemDisplay Item="@(new Item() { Name = merchant.RapportRarity?.ToString() ?? "", Rarity = merchant.RapportRarity ?? Rarity.Rare})" /></td>
                    <td>
                        @merchant.Votes 
                        <button class="btn btn-outline-light" alt="Upvote" @onclick="@(async m => await Upvote(merchant.Id))" ><span class="oi oi-thumb-up"></span></button> 
                        <button class="btn btn-outline-light" alt="Downvote" @onclick="@(async m => await Downvote(merchant.Id))"><span class="oi oi-thumb-down"></span></button>
                    </td>
                    <td rowspan="@rowSpan"><a class="link-danger" href="/UpdateMerchant/@Server/@merchantGroup.MerchantName">Suggest Replacement</a></td>
                }         
            </tr>
            @foreach (var merchant in merchantGroup.ActiveMerchants.Skip(1))
            {
                <tr>
                    <td><ZoneDisplay ZoneName="@merchant.Zone" /></td>
                    <td><ItemDisplay Item="@merchant.Card" /></td>
                    <td><ItemDisplay Item="@(new Item() { Name = merchant.RapportRarity?.ToString() ?? "", Rarity = merchant.RapportRarity ?? Rarity.Rare})" /></td>
                    <td>
                        @merchant.Votes
                        <button class="btn btn-outline-light" alt="Upvote" @onclick="@(async m => await Upvote(merchant.Id))" ><span class="oi oi-thumb-up"></span></button> 
                        <button class="btn btn-outline-light" alt="Downvote" @onclick="@(async m => await Downvote(merchant.Id))"><span class="oi oi-thumb-down"></span></button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter, EditorRequired]
    public IEnumerable<ActiveMerchantGroup> MerchantGroups { get; init; } = Enumerable.Empty<ActiveMerchantGroup>();

    [Parameter]
    public bool ActiveOnly { get; init; }

    [Parameter, EditorRequired]
    public string Server { get; init; } = string.Empty;

    private IEnumerable<ActiveMerchantGroup> GetVisibleMerchantGroups()
    {
        return MerchantGroups.Where(mg => mg.IsActive ^ !ActiveOnly);
    }

    public async Task Upvote(Guid merchantId)
    {
        await HubClient.Vote(Server, merchantId, VoteType.Upvote);
    }
    public async Task Downvote(Guid merchantId)
    {
        await HubClient.Vote(Server, merchantId, VoteType.Downvote);
    }
}
